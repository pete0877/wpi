/* Generated By:JJTree&JavaCC: Do not edit this line. tea.java */
import java.io.*;

public class tea/*@bgen(jjtree)*/implements teaTreeConstants, teaConstants {/*@bgen(jjtree)*/
  protected JJTteaState jjtree = new JJTteaState();public static void main(String[] args) throws ParseException, FileNotFoundException  {
                if ( args.length < 1 ) {
                        System.out.println("Please pass in the filename for a parameter.");
                        System.exit(1);
                }

                tea parser = new tea( new FileInputStream(args[0]) );

                SimpleNode root = parser.program();
                root.dump("");
                System.out.println("Parse completed.");
        }

  final public SimpleNode program() throws ParseException {
                        /*@bgen(jjtree) program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      method_declaration();
      jj_consume_token(0);
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
    jjtn000.myname = "program";
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public void method_declaration() throws ParseException {
                             /*@bgen(jjtree) method_declaration */
                              SimpleNode jjtn000 = new SimpleNode(JJTMETHOD_DECLARATION);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token tok1, tok2;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOIDTYPE:
        tok1 = jj_consume_token(VOIDTYPE);
        break;
      case DATATYPE:
        tok1 = jj_consume_token(DATATYPE);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tok2 = jj_consume_token(NAME);
      jj_consume_token(LPAREN);
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      statement_block();
      jj_consume_token(RBRACE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.myname = "method_declaration";
      jjtn000.value  = tok1.image;
          jjtn000.ovalue  = tok2.image;
          jjtn000.line_number = tok1.beginLine;
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void statement_block() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DATATYPE:
      case IF_KEYWORD:
      case DO_KEYWORD:
      case WHILE_KEYWORD:
      case FOR_KEYWORD:
      case LBRACE:
      case NAME:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      statement();
    }
  }

  final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATATYPE:
    case NAME:
      simple_statement();
      jj_consume_token(SEMICOLON);
      break;
    case IF_KEYWORD:
    case DO_KEYWORD:
    case WHILE_KEYWORD:
    case FOR_KEYWORD:
      compound_statement();
      break;
    case LBRACE:
      jj_consume_token(LBRACE);
      statement_block();
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void simple_statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATATYPE:
      declarative_statement();
      break;
    case NAME:
      assignment_statement();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void declarative_statement() throws ParseException {
                                /*@bgen(jjtree) declarative_statement */
                                 SimpleNode jjtn000 = new SimpleNode(JJTDECLARATIVE_STATEMENT);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);Token tok1;
    try {
      tok1 = jj_consume_token(DATATYPE);
      assignment_statement();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        assignment_statement();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.myname = "declarative_statement";
          jjtn000.value  = tok1.image;
          jjtn000.line_number = tok1.beginLine;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void assignment_statement() throws ParseException {
                               /*@bgen(jjtree) assignment_statement */
                                SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT_STATEMENT);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);Token tok1;
    try {
      tok1 = jj_consume_token(NAME);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGNOP:
        jj_consume_token(ASSIGNOP);
        expression();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.myname = "=";
          jjtn000.value = tok1.image;
          jjtn000.line_number = tok1.beginLine;
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void expression() throws ParseException {
    or_expression();
  }

  final public void or_expression() throws ParseException {
                        /*@bgen(jjtree) or_expression */
                         SimpleNode jjtn000 = new SimpleNode(JJTOR_EXPRESSION);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token tok1=null;
    try {
      and_expression();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR_OP:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
        tok1 = jj_consume_token(OR_OP);
                                    SimpleNode jjtn001 = new SimpleNode(JJTOR_EXPRESSION);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
        try {
          or_expression();
        } catch (Throwable jjte001) {
                                    if (jjtc001) {
                                      jjtree.clearNodeScope(jjtn001);
                                      jjtc001 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte001 instanceof ParseException) {
                                      {if (true) throw (ParseException)jjte001;}
                                    }
                                    if (jjte001 instanceof RuntimeException) {
                                      {if (true) throw (RuntimeException)jjte001;}
                                    }
                                    {if (true) throw (Error)jjte001;}
        } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                    }
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      if (tok1==null) jjtn000.myname = null;
          else {
                        jjtn000.myname = tok1.image;
                        jjtn000.line_number = tok1.beginLine;
          }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void and_expression() throws ParseException {
                         /*@bgen(jjtree) and_expression */
                          SimpleNode jjtn000 = new SimpleNode(JJTAND_EXPRESSION);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token tok1=null;
    try {
      relop_expression();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND_OP:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_4;
        }
        tok1 = jj_consume_token(AND_OP);
                                       SimpleNode jjtn001 = new SimpleNode(JJTAND_EXPRESSION);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
        try {
          and_expression();
        } catch (Throwable jjte001) {
                                       if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte001;}
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte001;}
                                       }
                                       {if (true) throw (Error)jjte001;}
        } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                       }
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          if (tok1==null) jjtn000.myname = null;
          else {
                                jjtn000.myname = tok1.image;
                                jjtn000.line_number = tok1.beginLine;
          }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void relop_expression() throws ParseException {
                           /*@bgen(jjtree) relop_expression */
                            SimpleNode jjtn000 = new SimpleNode(JJTRELOP_EXPRESSION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token tok1=null;
    try {
      ltgt_expression();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ_OP:
        case NEQ_OP:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ_OP:
          tok1 = jj_consume_token(EQ_OP);
          break;
        case NEQ_OP:
          tok1 = jj_consume_token(NEQ_OP);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                       SimpleNode jjtn001 = new SimpleNode(JJTRELOP_EXPRESSION);
                                                       boolean jjtc001 = true;
                                                       jjtree.openNodeScope(jjtn001);
        try {
          relop_expression();
        } catch (Throwable jjte001) {
                                                       if (jjtc001) {
                                                         jjtree.clearNodeScope(jjtn001);
                                                         jjtc001 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte001 instanceof ParseException) {
                                                         {if (true) throw (ParseException)jjte001;}
                                                       }
                                                       if (jjte001 instanceof RuntimeException) {
                                                         {if (true) throw (RuntimeException)jjte001;}
                                                       }
                                                       {if (true) throw (Error)jjte001;}
        } finally {
                                                       if (jjtc001) {
                                                         jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                                       }
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          if (tok1==null) jjtn000.myname = null;
          else {
                                        jjtn000.myname = tok1.image;
                                        jjtn000.line_number = tok1.beginLine;
          }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ltgt_expression() throws ParseException {
                          /*@bgen(jjtree) ltgt_expression */
                           SimpleNode jjtn000 = new SimpleNode(JJTLTGT_EXPRESSION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token tok1=null;
    try {
      addop_expression();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT_OP:
        case LT_EQ_OP:
        case GT_OP:
        case GT_EQ_OP:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_6;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT_OP:
          tok1 = jj_consume_token(LT_OP);
          break;
        case LT_EQ_OP:
          tok1 = jj_consume_token(LT_EQ_OP);
          break;
        case GT_OP:
          tok1 = jj_consume_token(GT_OP);
          break;
        case GT_EQ_OP:
          tok1 = jj_consume_token(GT_EQ_OP);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                                            SimpleNode jjtn001 = new SimpleNode(JJTLTGT_EXPRESSION);
                                                                                            boolean jjtc001 = true;
                                                                                            jjtree.openNodeScope(jjtn001);
        try {
          ltgt_expression();
        } catch (Throwable jjte001) {
                                                                                            if (jjtc001) {
                                                                                              jjtree.clearNodeScope(jjtn001);
                                                                                              jjtc001 = false;
                                                                                            } else {
                                                                                              jjtree.popNode();
                                                                                            }
                                                                                            if (jjte001 instanceof ParseException) {
                                                                                              {if (true) throw (ParseException)jjte001;}
                                                                                            }
                                                                                            if (jjte001 instanceof RuntimeException) {
                                                                                              {if (true) throw (RuntimeException)jjte001;}
                                                                                            }
                                                                                            {if (true) throw (Error)jjte001;}
        } finally {
                                                                                            if (jjtc001) {
                                                                                              jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                                                                            }
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          if (tok1==null) jjtn000.myname = null;
          else {
                                                jjtn000.myname = tok1.image;
                                                jjtn000.line_number = tok1.beginLine;
          }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void addop_expression() throws ParseException {
                           /*@bgen(jjtree) addop_expression */
                            SimpleNode jjtn000 = new SimpleNode(JJTADDOP_EXPRESSION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token tok1=null;
    try {
      mulop_expression();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS_OP:
        case MINUS_OP:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS_OP:
          tok1 = jj_consume_token(PLUS_OP);
          break;
        case MINUS_OP:
          tok1 = jj_consume_token(MINUS_OP);
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                             SimpleNode jjtn001 = new SimpleNode(JJTADDOP_EXPRESSION);
                                                             boolean jjtc001 = true;
                                                             jjtree.openNodeScope(jjtn001);
        try {
          addop_expression();
        } catch (Throwable jjte001) {
                                                             if (jjtc001) {
                                                               jjtree.clearNodeScope(jjtn001);
                                                               jjtc001 = false;
                                                             } else {
                                                               jjtree.popNode();
                                                             }
                                                             if (jjte001 instanceof ParseException) {
                                                               {if (true) throw (ParseException)jjte001;}
                                                             }
                                                             if (jjte001 instanceof RuntimeException) {
                                                               {if (true) throw (RuntimeException)jjte001;}
                                                             }
                                                             {if (true) throw (Error)jjte001;}
        } finally {
                                                             if (jjtc001) {
                                                               jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                                             }
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          if (tok1==null) jjtn000.myname = null;
          else {
                                                jjtn000.myname = tok1.image;
                                                jjtn000.line_number = tok1.beginLine;
          }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void mulop_expression() throws ParseException {
                           /*@bgen(jjtree) mulop_expression */
                            SimpleNode jjtn000 = new SimpleNode(JJTMULOP_EXPRESSION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token tok1=null;
    try {
      term();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MUL_OP:
        case DIV_OP:
        case MOD_OP:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MUL_OP:
          tok1 = jj_consume_token(MUL_OP);
          break;
        case DIV_OP:
          tok1 = jj_consume_token(DIV_OP);
          break;
        case MOD_OP:
          tok1 = jj_consume_token(MOD_OP);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                             SimpleNode jjtn001 = new SimpleNode(JJTMULOP_EXPRESSION);
                                                             boolean jjtc001 = true;
                                                             jjtree.openNodeScope(jjtn001);
        try {
          mulop_expression();
        } catch (Throwable jjte001) {
                                                             if (jjtc001) {
                                                               jjtree.clearNodeScope(jjtn001);
                                                               jjtc001 = false;
                                                             } else {
                                                               jjtree.popNode();
                                                             }
                                                             if (jjte001 instanceof ParseException) {
                                                               {if (true) throw (ParseException)jjte001;}
                                                             }
                                                             if (jjte001 instanceof RuntimeException) {
                                                               {if (true) throw (RuntimeException)jjte001;}
                                                             }
                                                             {if (true) throw (Error)jjte001;}
        } finally {
                                                             if (jjtc001) {
                                                               jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                                             }
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          if (tok1==null) jjtn000.myname = null;
          else {
                                                jjtn000.myname = tok1.image;
                                                jjtn000.line_number = tok1.beginLine;
          }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void term() throws ParseException {
              /*@bgen(jjtree) term */
               SimpleNode jjtn000 = new SimpleNode(JJTTERM);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Token tok1;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LNEG:
        tok1 = jj_consume_token(LNEG);
        value();
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         jjtn000.myname = tok1.image; jjtn000.line_number = tok1.beginLine;
        break;
      case LPAREN:
      case NAME:
      case NUMBER:
        value();
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.myname = null;
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void value() throws ParseException {
                /*@bgen(jjtree) value */
                 SimpleNode jjtn000 = new SimpleNode(JJTVALUE);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token tok1;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        tok1 = jj_consume_token(NAME);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.myname = tok1.image; jjtn000.line_number = tok1.beginLine;
        break;
      case NUMBER:
        tok1 = jj_consume_token(NUMBER);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.myname = tok1.image; jjtn000.line_number = tok1.beginLine;
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        expression();
        jj_consume_token(RPAREN);
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                         jjtn000.myname = null;
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void compound_statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF_KEYWORD:
      if_statement();
      break;
    case DO_KEYWORD:
    case WHILE_KEYWORD:
    case FOR_KEYWORD:
      loop_statement();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void if_statement() throws ParseException {
                       /*@bgen(jjtree) if_statement */
                        SimpleNode jjtn000 = new SimpleNode(JJTIF_STATEMENT);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token tok1;
    try {
      tok1 = jj_consume_token(IF_KEYWORD);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
      statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE_KEYWORD:
        jj_consume_token(ELSE_KEYWORD);
        statement();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.myname = tok1.image;
             jjtn000.line_number = tok1.beginLine;
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void loop_statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE_KEYWORD:
      while_statement();
      break;
    case DO_KEYWORD:
      do_while_statement();
      break;
    case FOR_KEYWORD:
      for_statement();
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void while_statement() throws ParseException {
                          /*@bgen(jjtree) while_statement */
                           SimpleNode jjtn000 = new SimpleNode(JJTWHILE_STATEMENT);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token tok1;
    try {
      tok1 = jj_consume_token(WHILE_KEYWORD);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
      statement();
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.myname = tok1.image;
                  jjtn000.line_number = tok1.beginLine;
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void do_while_statement() throws ParseException {
                             /*@bgen(jjtree) do_while_statement */
                              SimpleNode jjtn000 = new SimpleNode(JJTDO_WHILE_STATEMENT);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token tok1;
    try {
      tok1 = jj_consume_token(DO_KEYWORD);
      statement();
      jj_consume_token(WHILE_KEYWORD);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
      jj_consume_token(SEMICOLON);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.myname = tok1.image;
             jjtn000.line_number = tok1.beginLine;
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void for_statement() throws ParseException {
                        /*@bgen(jjtree) for_statement */
                         SimpleNode jjtn000 = new SimpleNode(JJTFOR_STATEMENT);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token tok1;
    try {
      tok1 = jj_consume_token(FOR_KEYWORD);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DATATYPE:
      case NAME:
        for_expression();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LNEG:
      case NAME:
      case NUMBER:
        expression();
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DATATYPE:
      case NAME:
        for_expression();
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      statement();
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.myname = tok1.image;
                  jjtn000.line_number = tok1.beginLine;
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void for_expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATATYPE:
      declarative_statement();
      break;
    case NAME:
      assignment_statement();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_9;
        }
        jj_consume_token(COMMA);
        assignment_statement();
      }
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  public teaTokenManager token_source;
  ASCII_CharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[26];
  final private int[] jj_la1_0 = {0x60,0x1ec0,0x1ec0,0x40,0x0,0x20000,0x40000,0x80000,0x300000,0x300000,0x3c00000,0x3c00000,0xc000000,0xc000000,0x70000000,0x70000000,0x80004000,0x4000,0xe80,0x100,0xe00,0x40,0x80004000,0x40,0x0,0x40,};
  final private int[] jj_la1_1 = {0x0,0x2,0x2,0x2,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x6,0x0,0x0,0x0,0x2,0x6,0x2,0x1,0x2,};

  public tea(java.io.InputStream stream) {
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new teaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  public tea(java.io.Reader stream) {
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new teaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  public tea(teaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  public void ReInit(teaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[36];
    for (int i = 0; i < 36; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 36; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
