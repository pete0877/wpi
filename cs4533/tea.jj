/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. tea.jj */
/*@egen*/options {
   IGNORE_CASE = false;
   OPTIMIZE_TOKEN_MANAGER = true;                   
   STATIC = false;
}
 
PARSER_BEGIN(tea)
 
import java.io.*;
 
public class tea/*@bgen(jjtree)*/implements teaTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTteaState jjtree = new JJTteaState();

/*@egen*/
	public static void main(String[] args) throws ParseException, FileNotFoundException  {
		if ( args.length < 1 ) {
			System.out.println("Please pass in the filename for a parameter.");
			System.exit(1);
		}
 
		tea parser = new tea( new FileInputStream(args[0]) );
 
		SimpleNode root = parser.program();
		root.dump("");
		System.out.println("Parse completed.");
	}
}
 
PARSER_END(tea)

SKIP: /* Whitespace */
 { "\t"
 | "\n"
 | "\r"
 | " " }
 
TOKEN: 
 { <VOIDTYPE:      "void">
 | <DATATYPE:      "int">   
 | <IF_KEYWORD:    "if">
 | <ELSE_KEYWORD:  "else">
 | <DO_KEYWORD:    "do">
 | <WHILE_KEYWORD: "while">
 | <FOR_KEYWORD:   "for">
 | <LBRACE:        "{">
 | <RBRACE:        "}">
 | <LPAREN:        "(">
 | <RPAREN:        ")">
 | <SEMICOLON:     ";">
 | <ASSIGNOP:      "=">
 | <OR_OP:         "||">
 | <AND_OP:        "&&">
 | <EQ_OP:         "==">
 | <NEQ_OP:        "!=">
 | <LT_OP:         "<">
 | <LT_EQ_OP:      "<=">
 | <GT_OP:         ">">
 | <GT_EQ_OP:      ">=">
 | <PLUS_OP:       "+">
 | <MINUS_OP:      "-">
 | <MUL_OP:        "*">
 | <DIV_OP:        "/">
 | <MOD_OP:        "%">
 | <LNEG:          "!"> 
 | <COMMA:         ",">
 | <NAME:          (["a"-"z"] | ["A"-"Z"]) ( ["a"-"z"] | ["A"-"Z"] | ["0"-"9"] | "_" )*>
 | <NUMBER:        (["0"-"9"])+>
 | <OTHER:         ~[]> }

SimpleNode program() : {/*@bgen(jjtree) program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
 {/*@bgen(jjtree) program */
   try {
/*@egen*/ method_declaration() <EOF>/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
 }
/*@egen*/  
 {  jjtn000.myname = "program";
 	return jjtn000; }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}
 
void method_declaration() : {/*@bgen(jjtree) method_declaration */
                              SimpleNode jjtn000 = new SimpleNode(JJTMETHOD_DECLARATION);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/ Token tok1, tok2; }
 {/*@bgen(jjtree) method_declaration */
   try {
/*@egen*/ (tok1=<VOIDTYPE> | tok1=<DATATYPE>) tok2=<NAME> <LPAREN> <RPAREN> <LBRACE> statement_block() <RBRACE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
 	{ jjtn000.myname = "method_declaration"; 
      jjtn000.value  = tok1.image;
	  jjtn000.ovalue  = tok2.image; 
	  jjtn000.line_number = tok1.beginLine; }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
 }
 
void statement_block()       : {}
 { ( statement() )* }
 
void statement()       : {}
 { simple_statement() <SEMICOLON> 
 | compound_statement() 
 | <LBRACE> statement_block() <RBRACE> }

void simple_statement()       : {}
 { declarative_statement() 
 | assignment_statement() }

void declarative_statement() : {/*@bgen(jjtree) declarative_statement */
                                 SimpleNode jjtn000 = new SimpleNode(JJTDECLARATIVE_STATEMENT);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
/*@egen*/ Token tok1; }
 {/*@bgen(jjtree) declarative_statement */
        try {
/*@egen*/	tok1=<DATATYPE>
  	assignment_statement() (<COMMA> assignment_statement())*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.myname = "declarative_statement"; 
	  jjtn000.value  = tok1.image; 
	  jjtn000.line_number = tok1.beginLine; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
 }
  
void assignment_statement() : {/*@bgen(jjtree) assignment_statement */
                                SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT_STATEMENT);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);
/*@egen*/ Token tok1;}
 {/*@bgen(jjtree) assignment_statement */
   try {
/*@egen*/ tok1=<NAME> (<ASSIGNOP> expression() )?/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
 	{ jjtn000.myname = "=";
	  jjtn000.value = tok1.image;
	  jjtn000.line_number = tok1.beginLine; }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
 }
  
void expression()       : { }
 { or_expression() }
 
void or_expression() : {/*@bgen(jjtree) or_expression */
                         SimpleNode jjtn000 = new SimpleNode(JJTOR_EXPRESSION);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/ Token tok1=null;}
 {/*@bgen(jjtree) or_expression */
   try {
/*@egen*/ and_expression() (tok1=<OR_OP>/*@bgen(jjtree) #or_expression(> 1) */
                                  {
                                    SimpleNode jjtn001 = new SimpleNode(JJTOR_EXPRESSION);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                  }
                                  try {
/*@egen*/ or_expression()/*@bgen(jjtree)*/
                                  } catch (Throwable jjte001) {
                                    if (jjtc001) {
                                      jjtree.clearNodeScope(jjtn001);
                                      jjtc001 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte001 instanceof ParseException) {
                                      throw (ParseException)jjte001;
                                    }
                                    if (jjte001 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte001;
                                    }
                                    throw (Error)jjte001;
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                    }
                                  }
/*@egen*/)*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    { if (tok1==null) jjtn000.myname = null; 
	  else {
			jjtn000.myname = tok1.image;	
			jjtn000.line_number = tok1.beginLine; 
	  }
	}/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
 } 

void and_expression() : {/*@bgen(jjtree) and_expression */
                          SimpleNode jjtn000 = new SimpleNode(JJTAND_EXPRESSION);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/ Token tok1=null;}
 {/*@bgen(jjtree) and_expression */
   try {
/*@egen*/ relop_expression() (tok1=<AND_OP>/*@bgen(jjtree) #and_expression(> 1) */
                                     {
                                       SimpleNode jjtn001 = new SimpleNode(JJTAND_EXPRESSION);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                     }
                                     try {
/*@egen*/ and_expression()/*@bgen(jjtree)*/
                                     } catch (Throwable jjte001) {
                                       if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         throw (ParseException)jjte001;
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte001;
                                       }
                                       throw (Error)jjte001;
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                       }
                                     }
/*@egen*/)*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
 	{ if (tok1==null) jjtn000.myname = null; 
	  else {
				jjtn000.myname = tok1.image;	
				jjtn000.line_number = tok1.beginLine; 
	  }
	}/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
 }
 
void relop_expression() : {/*@bgen(jjtree) relop_expression */
                            SimpleNode jjtn000 = new SimpleNode(JJTRELOP_EXPRESSION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/ Token tok1=null;}
 {/*@bgen(jjtree) relop_expression */
   try {
/*@egen*/ ltgt_expression() ((tok1=<EQ_OP> | tok1=<NEQ_OP>)/*@bgen(jjtree) #relop_expression(> 1) */
                                                     {
                                                       SimpleNode jjtn001 = new SimpleNode(JJTRELOP_EXPRESSION);
                                                       boolean jjtc001 = true;
                                                       jjtree.openNodeScope(jjtn001);
                                                     }
                                                     try {
/*@egen*/ relop_expression()/*@bgen(jjtree)*/
                                                     } catch (Throwable jjte001) {
                                                       if (jjtc001) {
                                                         jjtree.clearNodeScope(jjtn001);
                                                         jjtc001 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte001 instanceof ParseException) {
                                                         throw (ParseException)jjte001;
                                                       }
                                                       if (jjte001 instanceof RuntimeException) {
                                                         throw (RuntimeException)jjte001;
                                                       }
                                                       throw (Error)jjte001;
                                                     } finally {
                                                       if (jjtc001) {
                                                         jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                                       }
                                                     }
/*@egen*/)*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
 	{ if (tok1==null) jjtn000.myname = null; 
	  else {
					jjtn000.myname = tok1.image;	
					jjtn000.line_number = tok1.beginLine; 
	  }
	}/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
 }
 
void ltgt_expression() : {/*@bgen(jjtree) ltgt_expression */
                           SimpleNode jjtn000 = new SimpleNode(JJTLTGT_EXPRESSION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/ Token tok1=null;}
 {/*@bgen(jjtree) ltgt_expression */
   try {
/*@egen*/ addop_expression() ( (tok1=<LT_OP> | tok1=<LT_EQ_OP> | tok1=<GT_OP> | tok1=<GT_EQ_OP>)/*@bgen(jjtree) #ltgt_expression(> 1) */
                                                                                          {
                                                                                            SimpleNode jjtn001 = new SimpleNode(JJTLTGT_EXPRESSION);
                                                                                            boolean jjtc001 = true;
                                                                                            jjtree.openNodeScope(jjtn001);
                                                                                          }
                                                                                          try {
/*@egen*/ ltgt_expression()/*@bgen(jjtree)*/
                                                                                          } catch (Throwable jjte001) {
                                                                                            if (jjtc001) {
                                                                                              jjtree.clearNodeScope(jjtn001);
                                                                                              jjtc001 = false;
                                                                                            } else {
                                                                                              jjtree.popNode();
                                                                                            }
                                                                                            if (jjte001 instanceof ParseException) {
                                                                                              throw (ParseException)jjte001;
                                                                                            }
                                                                                            if (jjte001 instanceof RuntimeException) {
                                                                                              throw (RuntimeException)jjte001;
                                                                                            }
                                                                                            throw (Error)jjte001;
                                                                                          } finally {
                                                                                            if (jjtc001) {
                                                                                              jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                                                                            }
                                                                                          }
/*@egen*/)*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
 	{ if (tok1==null) jjtn000.myname = null; 
	  else {
	  					jjtn000.myname = tok1.image;	
	  					jjtn000.line_number = tok1.beginLine; 
	  }
	}/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/  
 }
  
void addop_expression() : {/*@bgen(jjtree) addop_expression */
                            SimpleNode jjtn000 = new SimpleNode(JJTADDOP_EXPRESSION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/ Token tok1=null;}
 {/*@bgen(jjtree) addop_expression */
   try {
/*@egen*/ mulop_expression() ( (tok1=<PLUS_OP> | tok1=<MINUS_OP>)/*@bgen(jjtree) #addop_expression(> 1) */
                                                           {
                                                             SimpleNode jjtn001 = new SimpleNode(JJTADDOP_EXPRESSION);
                                                             boolean jjtc001 = true;
                                                             jjtree.openNodeScope(jjtn001);
                                                           }
                                                           try {
/*@egen*/ addop_expression()/*@bgen(jjtree)*/
                                                           } catch (Throwable jjte001) {
                                                             if (jjtc001) {
                                                               jjtree.clearNodeScope(jjtn001);
                                                               jjtc001 = false;
                                                             } else {
                                                               jjtree.popNode();
                                                             }
                                                             if (jjte001 instanceof ParseException) {
                                                               throw (ParseException)jjte001;
                                                             }
                                                             if (jjte001 instanceof RuntimeException) {
                                                               throw (RuntimeException)jjte001;
                                                             }
                                                             throw (Error)jjte001;
                                                           } finally {
                                                             if (jjtc001) {
                                                               jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                                             }
                                                           }
/*@egen*/)*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
 	{ if (tok1==null) jjtn000.myname = null; 
	  else {
	  					jjtn000.myname = tok1.image;	
	  					jjtn000.line_number = tok1.beginLine; 
	  }
	}/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/  
 }

void mulop_expression() : {/*@bgen(jjtree) mulop_expression */
                            SimpleNode jjtn000 = new SimpleNode(JJTMULOP_EXPRESSION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/ Token tok1=null;}
 {/*@bgen(jjtree) mulop_expression */
   try {
/*@egen*/ term() ((tok1=<MUL_OP> | tok1=<DIV_OP> | tok1=<MOD_OP>)/*@bgen(jjtree) #mulop_expression(> 1) */
                                                           {
                                                             SimpleNode jjtn001 = new SimpleNode(JJTMULOP_EXPRESSION);
                                                             boolean jjtc001 = true;
                                                             jjtree.openNodeScope(jjtn001);
                                                           }
                                                           try {
/*@egen*/ mulop_expression()/*@bgen(jjtree)*/
                                                           } catch (Throwable jjte001) {
                                                             if (jjtc001) {
                                                               jjtree.clearNodeScope(jjtn001);
                                                               jjtc001 = false;
                                                             } else {
                                                               jjtree.popNode();
                                                             }
                                                             if (jjte001 instanceof ParseException) {
                                                               throw (ParseException)jjte001;
                                                             }
                                                             if (jjte001 instanceof RuntimeException) {
                                                               throw (RuntimeException)jjte001;
                                                             }
                                                             throw (Error)jjte001;
                                                           } finally {
                                                             if (jjtc001) {
                                                               jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                                             }
                                                           }
/*@egen*/)*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
 	{ if (tok1==null) jjtn000.myname = null; 
	  else {
	  					jjtn000.myname = tok1.image;	
	  					jjtn000.line_number = tok1.beginLine; 
	  }
	}/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
 }
  
void term(): {/*@bgen(jjtree) term */
               SimpleNode jjtn000 = new SimpleNode(JJTTERM);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/ Token tok1;}
 {/*@bgen(jjtree) term */
   try {
/*@egen*/ tok1=<LNEG> value()/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ { jjtn000.myname = tok1.image; jjtn000.line_number = tok1.beginLine; }
 | value()/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ { jjtn000.myname = null; }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
 }

void value() : {/*@bgen(jjtree) value */
                 SimpleNode jjtn000 = new SimpleNode(JJTVALUE);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/ Token tok1; }
 {/*@bgen(jjtree) value */
        try {
/*@egen*/ 	tok1=<NAME>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ { jjtn000.myname = tok1.image; jjtn000.line_number = tok1.beginLine; }
 |	tok1=<NUMBER>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ { jjtn000.myname = tok1.image; jjtn000.line_number = tok1.beginLine; } 
 | 	<LPAREN> expression() <RPAREN>/*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                       }
/*@egen*/ { jjtn000.myname = null; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
 }
  
void compound_statement()      : { }
 { if_statement() | loop_statement() }  

void if_statement() : {/*@bgen(jjtree) if_statement */
                        SimpleNode jjtn000 = new SimpleNode(JJTIF_STATEMENT);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/ Token tok1; }
 {/*@bgen(jjtree) if_statement */
   try {
/*@egen*/ tok1=<IF_KEYWORD> 
 	<LPAREN> expression() <RPAREN> statement() 
   (<ELSE_KEYWORD> statement())?/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ 	   
	   { jjtn000.myname = tok1.image; 
	     jjtn000.line_number = tok1.beginLine; 
	   }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
 }  
 
void loop_statement()      : { }
 { while_statement() | do_while_statement() | for_statement() }  
 
void while_statement() : {/*@bgen(jjtree) while_statement */
                           SimpleNode jjtn000 = new SimpleNode(JJTWHILE_STATEMENT);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/ Token tok1; }
 {/*@bgen(jjtree) while_statement */
   try {
/*@egen*/ tok1=<WHILE_KEYWORD> <LPAREN> expression() <RPAREN> statement()/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ 
 		{ jjtn000.myname = tok1.image; 
		  jjtn000.line_number = tok1.beginLine; }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
 }  
 
void do_while_statement() : {/*@bgen(jjtree) do_while_statement */
                              SimpleNode jjtn000 = new SimpleNode(JJTDO_WHILE_STATEMENT);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/ Token tok1; }
 {/*@bgen(jjtree) do_while_statement */
   try {
/*@egen*/ tok1=<DO_KEYWORD> statement()
   <WHILE_KEYWORD> <LPAREN> expression() <RPAREN> <SEMICOLON>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/
	   { jjtn000.myname = tok1.image; 
	     jjtn000.line_number = tok1.beginLine; }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
 }  
 
void for_statement() : {/*@bgen(jjtree) for_statement */
                         SimpleNode jjtn000 = new SimpleNode(JJTFOR_STATEMENT);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/ Token tok1; }
 {/*@bgen(jjtree) for_statement */
   try {
/*@egen*/ tok1=<FOR_KEYWORD> <LPAREN>   (for_expression())? <SEMICOLON> 
						 	(expression())? <SEMICOLON> 
							(for_expression())? 
				 <RPAREN>
				 statement()/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/	
		{ jjtn000.myname = tok1.image; 
		  jjtn000.line_number = tok1.beginLine; 
		}/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
 }  

void for_expression()      :
 { }
 { declarative_statement() | assignment_statement() ( <COMMA> assignment_statement() )* }   
