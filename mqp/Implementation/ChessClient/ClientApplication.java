/*
	This simple extension of the java.awt.Frame class
	contains all the elements necessary to act as the
	main window of an application.
 */

import java.awt.*;

public class ClientApplication extends Frame
{
	public ClientApplication()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		
		//{{INIT_CONTROLS
		setLayout(null);
		setBackground(new java.awt.Color(160,143,112));
		setSize(414,456);
		setVisible(false);
		lblServerMsg.setText("Server Messages");
		add(lblServerMsg);
		lblServerMsg.setBounds(132,288,96,24);
		lblClientRsp.setText("Client Response");
		add(lblClientRsp);
		lblClientRsp.setBounds(132,402,120,24);
		statusArea.setEditable(false);
		add(statusArea);
		statusArea.setBackground(java.awt.Color.white);
		statusArea.setBounds(132,312,276,84);
		add(imageCanvas1);
		imageCanvas1.setBackground(java.awt.Color.black);
		imageCanvas1.setBounds(6,6,120,445);
		add(DGTEMoveText1);
		DGTEMoveText1.setBackground(java.awt.Color.white);
		DGTEMoveText1.setBounds(132,426,276,24);
		setTitle("DGTE Client");
		//}}

		add(gp);
		gp.setBounds(132,5,276,276);
		
		//{{INIT_MENUS
		menu1.setLabel("Configuration");
		menu1.add(newMenuItem);
		newMenuItem.setLabel("New Game...");
		newMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_N,false));
		menu1.add(exitMenuItem);
		exitMenuItem.setLabel("Exit");
		mainMenuBar.add(menu1);
		menu3.setLabel("Help");
		menu3.add(aboutMenuItem);
		aboutMenuItem.setLabel("About...");
		mainMenuBar.add(menu3);
		//$$ mainMenuBar.move(132,492);
		setMenuBar(mainMenuBar);
		//}}
		
		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		exitMenuItem.addActionListener(lSymAction);
		aboutMenuItem.addActionListener(lSymAction);
		newMenuItem.addActionListener(lSymAction);
		SymComponent aSymComponent = new SymComponent();
		this.addComponentListener(aSymComponent);
		//}}
	    
	    // DGTE Stuff
       	client.addMessagePipeConnection(mPipe);
    	mPipe.addMessagePipeConnection(client);
    	
    	statusArea.addMessagePipeConnection(mPipe);
    	mPipe.addMessagePipeConnection(statusArea);
    	
    	cfgDialog.addMessagePipeConnection(mPipe);
    	mPipe.addMessagePipeConnection(cfgDialog);
    	
    	gp.addMessagePipeConnection(mPipe);
    	mPipe.addMessagePipeConnection(gp);
        
	    DGTEMoveText1.addMessagePipeConnection(mPipe);
	    mPipe.addMessagePipeConnection(DGTEMoveText1);
	
	    imageCanvas1.setImage("main.jpg");
	    // DGTE Stuff

	}
	
	public ClientApplication(String title)
	{
		this();
		setTitle(title);
	}
	
    /**
     * Shows or hides the component depending on the boolean flag b.
     * @param b  if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b)
	{
		if(b)
		{
			setLocation(50, 50);
		}	
		super.setVisible(b);
	}
	
	static public void main(String args[])
	{
		try
		{
            //Create new splash screen
            DGTESplash ss = new DGTESplash();
            ss.setVisible(true);
            long begintime = System.currentTimeMillis();
	        while (System.currentTimeMillis() < (begintime+2500)) {}
   		    ss.setVisible(false);
		    ss.dispose();

			//Create a new instance of our application's frame, and make it visible.
            (new ClientApplication()).setVisible(true);
		}
		catch (Throwable t)
		{
			System.err.println(t);
			t.printStackTrace();
			//Ensure the application exits with an error condition.
			System.exit(1);
		}
	}
	
	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension d = getSize();
		
		super.addNotify();
	
		if (fComponentsAdjusted)
			return;
	
		// Adjust components according to the insets
		setSize(getInsets().left + getInsets().right + d.width, getInsets().top + getInsets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(getInsets().left, getInsets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}
	
	// Used for addNotify check.
	boolean fComponentsAdjusted = false;

	// DGTE Stuff
	DGTEClientServerProtocol_Version1 csProtocol = new DGTEClientServerProtocol_Version1();
	DGTEClient client = new DGTEClient(csProtocol);
	DGTEMessagePipe mPipe = new DGTEMessagePipe();
	DGTEConfigDialog cfgDialog = new DGTEConfigDialog(this, "DGTE Game Configuration", true);
	DGTEGamePlayer gp = new DGTEGamePlayer(csProtocol);
	// DGTE Stuff
	
	//{{DECLARE_CONTROLS
	java.awt.Label lblServerMsg = new java.awt.Label();
	java.awt.Label lblClientRsp = new java.awt.Label();
	DGTEStatusArea statusArea = new DGTEStatusArea();
	ImageCanvas imageCanvas1 = new ImageCanvas();
	DGTEMoveText DGTEMoveText1 = new DGTEMoveText();
	//}}

	//{{DECLARE_MENUS
	java.awt.MenuBar mainMenuBar = new java.awt.MenuBar();
	java.awt.Menu menu1 = new java.awt.Menu();
	java.awt.MenuItem newMenuItem = new java.awt.MenuItem();
	java.awt.MenuItem exitMenuItem = new java.awt.MenuItem();
	java.awt.Menu menu3 = new java.awt.Menu();
	java.awt.MenuItem aboutMenuItem = new java.awt.MenuItem();
	//}}


	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == ClientApplication.this)
				ClientApplication_WindowClosing(event);
		}
	}
	
	void ClientApplication_WindowClosing(java.awt.event.WindowEvent event)
	{
		// to do: code goes here.
			 
		ClientApplication_WindowClosing_Interaction1(event);
	}

	
	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == aboutMenuItem)
				aboutMenuItem_ActionPerformed(event);
			else if (object == exitMenuItem)
				exitMenuItem_ActionPerformed(event);
			else if (object == newMenuItem)
				newMenuItem_ActionPerformed(event);
		}
	}


	void aboutMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		aboutMenuItem_ActionPerformed_Interaction1(event);
	}


	void aboutMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			// AboutDialog Create and show as modal
			(new AboutDialog(this, true)).setVisible(true);
		} catch (Exception e) {
		}
	}
	
	
	void exitMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		exitMenuItem_ActionPerformed_Interaction1(event);
	}

	void exitMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			setVisible(false);    // Hide the frame
	        dispose();            // Free system resources
		    System.exit(0);             // close the application
		} catch (Exception e) {
		}
	}


	void ClientApplication_WindowClosing_Interaction1(java.awt.event.WindowEvent event)
	{
		try {
			setVisible(false);    // Hide the frame
	        dispose();            // Free system resources
		    System.exit(0);             // close the application
		} catch (Exception e) {
		}
	}

	void newMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		newMenuItem_ActionPerformed_Interaction1(event);
	}

	void newMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			// DGTEConfigDialog Create with title, show as modal
			cfgDialog.setVisible(true);
		} catch (Exception e) {
		}
	}

	class SymComponent extends java.awt.event.ComponentAdapter
	{
		public void componentResized(java.awt.event.ComponentEvent event)
		{
			Object object = event.getSource();
			if (object == ClientApplication.this)
				ClientApplication_ComponentResized(event);
		}
	}

	void ClientApplication_ComponentResized(java.awt.event.ComponentEvent event)
	{
		// to do: code goes here.
	}
}