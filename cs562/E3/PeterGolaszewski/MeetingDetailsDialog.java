// Class  : MeetingDetailsDialog
// Author : Peter Golaszewski
//        : peterg@wpi.edu
// Version: 1.0

// import meeting.*;

import meeting.Meeting;

import java.awt.*;

public class MeetingDetailsDialog extends Dialog
{
    protected Meeting m_shownMeeting;
    
    public Meeting getMeeting() {
        return m_shownMeeting;
    }

    public void setMeeting(Meeting meeting) {
        m_shownMeeting = meeting;
    }    
    
	public MeetingDetailsDialog(Frame parent)
	{
		super(parent);

        m_shownMeeting = null;

		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setLayout(null);
		setBackground(new java.awt.Color(255,255,221));
		setSize(430,299);
		setVisible(false);
		label1.setText("Meeting Details:");
		add(label1);
		label1.setBackground(new java.awt.Color(255,255,221));
		label1.setFont(new Font("Dialog", Font.BOLD, 14));
		label1.setBounds(12,0,132,24);
		button1.setLabel("Ok");
		add(button1);
		button1.setBackground(java.awt.Color.yellow);
		button1.setBounds(48,252,84,28);
		button2.setLabel("Cancel");
		add(button2);
		button2.setBackground(java.awt.Color.yellow);
		button2.setBounds(324,252,84,28);
		add(textDescription);
		textDescription.setBackground(java.awt.Color.white);
		textDescription.setBounds(120,108,288,48);
		label2.setText("Description:");
		label2.setAlignment(java.awt.Label.RIGHT);
		add(label2);
		label2.setBackground(new java.awt.Color(255,255,221));
		label2.setBounds(12,108,96,24);
		labelDate.setText("date");
		add(labelDate);
		labelDate.setBackground(new java.awt.Color(255,255,221));
		labelDate.setBounds(36,24,216,24);
		labelStartTime.setText("start time");
		add(labelStartTime);
		labelStartTime.setBackground(new java.awt.Color(255,255,221));
		labelStartTime.setBounds(60,48,312,24);
		labelEndTime.setText("end time");
		add(labelEndTime);
		labelEndTime.setBackground(new java.awt.Color(255,255,221));
		labelEndTime.setBounds(60,72,312,24);
		choiceReoccurence.addItem("NA");
		choiceReoccurence.addItem("every day");
		choiceReoccurence.addItem("every 2 days");
		choiceReoccurence.addItem("every 3 days");
		choiceReoccurence.addItem("every 4 days");
		choiceReoccurence.addItem("every 5 days");
		choiceReoccurence.addItem("every 6 days");
		choiceReoccurence.addItem("every 7 days");
		choiceReoccurence.addItem("every 15 days");
		choiceReoccurence.addItem("every 30 days");
		choiceReoccurence.addItem("every 365 days");
		try {
			choiceReoccurence.select(0);
		}
		catch (IllegalArgumentException e) { }
		choiceReoccurence.setBackground(java.awt.Color.white);
		add(choiceReoccurence);
		choiceReoccurence.setBounds(120,168,288,25);
		label3.setText("Reoccurence:");
		label3.setAlignment(java.awt.Label.RIGHT);
		add(label3);
		label3.setBackground(new java.awt.Color(255,255,221));
		label3.setBounds(12,168,96,24);
		choiceReminder.addItem("NA");
		choiceReminder.addItem("5 minutes ahead");
		choiceReminder.addItem("10 minutes ahead");
		choiceReminder.addItem("15 minutes ahead");
		choiceReminder.addItem("30 minutes ahead");
		choiceReminder.addItem("1 hour ahead");
		try {
			choiceReminder.select(0);
		}
		catch (IllegalArgumentException e) { }
		choiceReminder.setBackground(java.awt.Color.white);
		add(choiceReminder);
		choiceReminder.setBounds(120,204,288,25);
		label4.setText("Remind me:");
		label4.setAlignment(java.awt.Label.RIGHT);
		add(label4);
		label4.setBackground(new java.awt.Color(255,255,221));
		label4.setBounds(12,204,96,24);
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymMouse aSymMouse = new SymMouse();
		button1.addMouseListener(aSymMouse);
		button2.addMouseListener(aSymMouse);
		//}}
	}
	
	public MeetingDetailsDialog(Frame parent, boolean modal)
	{
		this(parent);
        setModal(modal);
	}
	
	public void addNotify()
	{
  	    // Record the size of the window prior to calling parents addNotify.
	    Dimension d = getSize();

		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + d.width, insets.top + insets.bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets.left, insets.top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}

    // Used for addNotify check.
	boolean fComponentsAdjusted = false;


	public MeetingDetailsDialog(Frame parent, String title, boolean modal)
	{
		this(parent, modal);
		setTitle(title);
	}

    /**
     * Shows or hides the component depending on the boolean flag b.
     * @param b  if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b)
	{
		if(b)
		{
			Rectangle bounds = getParent().getBounds();
			Rectangle abounds = getBounds();
	
			setLocation(bounds.x + (bounds.width - abounds.width)/ 2,
				 bounds.y + (bounds.height - abounds.height)/2);
				 
            if (m_shownMeeting!=null) {
                // show the details of the meeting:
                
                textDescription.setText(m_shownMeeting.getDescription());
                labelDate.setText("Date: " + m_shownMeeting.getStartDate().toStringDate());
                labelStartTime.setText("from: " + m_shownMeeting.getStartDate().toStringTime());
                labelEndTime.setText("  to:" + m_shownMeeting.getEndDate().toStringTime());                
                int selection = 0;
                if (m_shownMeeting.getReminder()==5) { selection = 1; } 
                if (m_shownMeeting.getReminder()==10) { selection = 2; } 
                if (m_shownMeeting.getReminder()==15) { selection = 3; } 
                if (m_shownMeeting.getReminder()==30) { selection = 4; } 
                if (m_shownMeeting.getReminder()==60) { selection = 5; } 
                 
                try {
			        choiceReminder.select(selection);
		        } catch (IllegalArgumentException e) { }
		        
		        selection = 0;
                if (m_shownMeeting.getReoccurence()==1) { selection = 1; } 
                if (m_shownMeeting.getReoccurence()==2) { selection = 2; } 
                if (m_shownMeeting.getReoccurence()==3) { selection = 3; } 
                if (m_shownMeeting.getReoccurence()==4) { selection = 4; } 
                if (m_shownMeeting.getReoccurence()==5) { selection = 5; } 
                if (m_shownMeeting.getReoccurence()==6) { selection = 6; } 
                if (m_shownMeeting.getReoccurence()==7) { selection = 7; } 
                if (m_shownMeeting.getReoccurence()==15) { selection = 8; } 
                if (m_shownMeeting.getReoccurence()==30) { selection = 9; } 
                if (m_shownMeeting.getReoccurence()==365) { selection = 10; } 
                try {
			        choiceReoccurence.select(selection);
		        } catch (IllegalArgumentException e) { }
		
            }	 
		}
		super.setVisible(b);
	}

	//{{DECLARE_CONTROLS
	java.awt.Label label1 = new java.awt.Label();
	java.awt.Button button1 = new java.awt.Button();
	java.awt.Button button2 = new java.awt.Button();
	java.awt.TextField textDescription = new java.awt.TextField();
	java.awt.Label label2 = new java.awt.Label();
	java.awt.Label labelDate = new java.awt.Label();
	java.awt.Label labelStartTime = new java.awt.Label();
	java.awt.Label labelEndTime = new java.awt.Label();
	java.awt.Choice choiceReoccurence = new java.awt.Choice();
	java.awt.Label label3 = new java.awt.Label();
	java.awt.Choice choiceReminder = new java.awt.Choice();
	java.awt.Label label4 = new java.awt.Label();
	//}}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == MeetingDetailsDialog.this)
				MeetingDetailsDialog_WindowClosing(event);
		}
	}
	
	void MeetingDetailsDialog_WindowClosing(java.awt.event.WindowEvent event)
	{
		setVisible(false);
	}

	class SymMouse extends java.awt.event.MouseAdapter
	{
		public void mouseReleased(java.awt.event.MouseEvent event)
		{
			Object object = event.getSource();
			if (object == button1)
				button1_MouseReleased(event);
			else if (object == button2)
				button2_MouseReleased(event);
		}
	}

	void button1_MouseReleased(java.awt.event.MouseEvent event)
	{
	    // USER CLICKED OK
	    
	    if (m_shownMeeting==null) {
            hide();
            return;
        }
	    
	    // update the meeting informtion
	    m_shownMeeting.setDescription(textDescription.getText());
	    String reminder = choiceReminder.getSelectedItem();
	    String reoccurence = choiceReoccurence.getSelectedItem();

        int nReoccurence = 0;
		if (reoccurence.equals("every day")) { nReoccurence = 1; } else
		if (reoccurence.equals("every 2 days")) { nReoccurence = 2; } else
		if (reoccurence.equals("every 3 days")) { nReoccurence = 3; } else
		if (reoccurence.equals("every 4 days")) { nReoccurence = 4; } else
		if (reoccurence.equals("every 5 days")) { nReoccurence = 5; } else
		if (reoccurence.equals("every 6 days")) { nReoccurence = 6; } else
		if (reoccurence.equals("every 7 days")) { nReoccurence = 7; } else		
		if (reoccurence.equals("every 15 days")) { nReoccurence = 15; } else
		if (reoccurence.equals("every 30 days")) { nReoccurence = 30; } else
		if (reoccurence.equals("every 365 days")) { nReoccurence = 365; }
		m_shownMeeting.setReoccurence(nReoccurence);
		
		int nReminder = 0;
		if (reminder.equals("5 minutes ahead")) { nReminder = 5; } else
		if (reminder.equals("10 minutes ahead")) { nReminder = 10; } else
		if (reminder.equals("15 minutes ahead")) { nReminder = 15; } else
		if (reminder.equals("30 minutes ahead")) { nReminder = 30; } else
		if (reminder.equals("1 hour ahead")) { nReminder = 60; }
		m_shownMeeting.setReminder(nReminder);
		
		hide();
		
	}

	void button2_MouseReleased(java.awt.event.MouseEvent event)
	{
	    // USER CANCELED
	    m_shownMeeting = null; 					 
	    hide();
	}
}
