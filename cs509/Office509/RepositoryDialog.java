// Class:    RepositoryDialog
// Author:   George T. Heineman
//           http://www.cs.wpi.edu/~heineman
// Version:  1.0
// 


/*
	A basic extension of the java.awt.Dialog class
 */

import java.awt.*;
import java.awt.event.*;
import java.util.Enumeration;
import java.util.StringTokenizer;

import repository.*;

public class RepositoryDialog extends Dialog {
    
    protected RepositoryInterface repository = null;
    protected RepositoryDialogListener listener = null;
    protected java.awt.PopupMenu pm;
    
    public static final int LOAD = 0;
    public static final int SAVE = 1;
    public static final String UPONELEVEL = "..";
    
    protected String _filterName = null;
    protected String _filterType = null;
    protected String _topLevel = "/";
    protected String _absoluteTopLevel = "/";
    protected int _mode = 0;

    /**
     * @param topLevel is the level to start out and points to the current
     *        topLevel selected.
     * @param filterName, when non-null, will filter out entries by name
     * @param filterType, when non-null, will filter out entries by resource type
     *
     * @param Repository is the entity holding the information.
     */
	public RepositoryDialog(Frame parent, RepositoryInterface rep, String topLevel, String filterName, String filterType, int mode)
	{
		super(parent, true);

		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setLayout(null);
		setVisible(false);
		setSize(410,315);
		normalMenuItem = new java.awt.MenuItem("Normal");
		//RepositoryDialog.add(normalMenuItem);
		detailsMenuItem = new java.awt.MenuItem("Details");
		//RepositoryDialog.add(detailsMenuItem);
		actionButton = new java.awt.Button();
		actionButton.setLabel("Open");
		actionButton.setBounds(300,204,84,20);
		actionButton.setFont(new Font("Dialog", Font.BOLD, 12));
		add(actionButton);
		cancelButton = new java.awt.Button();
		cancelButton.setLabel("Cancel");
		cancelButton.setBounds(300,228,84,20);
		cancelButton.setFont(new Font("Dialog", Font.BOLD, 12));
		add(cancelButton);
		label1 = new java.awt.Label("Look in:");
		label1.setBounds(24,12,60,23);
		add(label1);
		resourceList = new java.awt.List(4);
		add(resourceList);
		resourceList.setBounds(24,48,360,144);
		upButton = new java.awt.Button();
		upButton.setLabel("up");
		upButton.setBounds(288,12,36,20);
		upButton.setFont(new Font("Dialog", Font.BOLD, 12));
		upButton.setBackground(new Color(12632256));
		add(upButton);
		label2 = new java.awt.Label("Resources of type:");
		label2.setBounds(24,228,108,23);
		add(label2);
		label3 = new java.awt.Label("Resource name:");
		label3.setBounds(24,204,96,23);
		add(label3);
		resourceType = new java.awt.Choice();
		resourceType.addItem("All files (*)");
		try {
			resourceType.select(0);
		}
		catch (IllegalArgumentException e) { }
		add(resourceType);
		resourceType.setBounds(132,228,144,24);
		resourceFilter = new java.awt.TextField();
		resourceFilter.setBounds(132,204,144,20);
		add(resourceFilter);
		createButton = new java.awt.Button();
		createButton.setLabel("create");
		createButton.setBounds(336,12,48,20);
		createButton.setFont(new Font("Dialog", Font.BOLD, 12));
		createButton.setBackground(new Color(12632256));
		add(createButton);
		levelHistory = new java.awt.Choice();
		add(levelHistory);
		levelHistory.setBounds(96,12,180,24);
		setTitle("Select a Resource");
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		cancelButton.addActionListener(lSymAction);
		actionButton.addActionListener(lSymAction);
		upButton.addActionListener(lSymAction);
		createButton.addActionListener(lSymAction);
		resourceList.addActionListener(lSymAction);
		SymItem lSymItem = new SymItem();
		resourceType.addItemListener(lSymItem);
		SymText lSymText = new SymText();
		resourceFilter.addTextListener(lSymText);
		SymMouse aSymMouse = new SymMouse();
		resourceList.addMouseListener(aSymMouse);
		normalMenuItem.addActionListener(lSymAction);
		detailsMenuItem.addActionListener(lSymAction);
		resourceList.addItemListener(lSymItem);
		//}}
		
		// Rename actionButton based on action.
		if (mode == LOAD) {
		    actionButton.setLabel("Open");
		} else if (mode == SAVE) {
		    actionButton.setLabel("Save");
		}
		
		
		// select the first one in the list
		try {
			levelHistory.select(0);
		}
		catch (IllegalArgumentException e) { }
		
		// Process repository types.  Start with basic ones
		resourceType.addItem ("Renderer");
		resourceType.addItem ("Presentation");
		resourceType.addItem ("Database");
		
		//Hook up the dialogs
		pm = new java.awt.PopupMenu();
		pm.setLabel("Listing Options");
		pm.add(normalMenuItem);
		pm.add(detailsMenuItem);
		resourceList.add (pm);
		
		// load up the information in the lists.
		repository = rep;
		
		// store parameters
		_topLevel = topLevel;
		
		// If filter is "" act like it is null
		_filterType = filterType;
		if ((_filterType != null) && (_filterType.equals (""))) {
		    _filterType = null;
		}
		
		// If filter doesn't already exist, add to the list of filters and select
		if (_filterType != null) {
		    int i = 0;
		    for (i = 0; i < resourceType.getItemCount(); i++) {
		        if (resourceType.getItem(i).equals (_filterType)) {
		            resourceType.select(i);
		            break;
		        }
		    }
		    if (i == resourceType.getItemCount()) {
		        resourceType.addItem (_filterType);
		        resourceType.select (i);
		    }
		}
		
		
		// If filterName is "" act like it is null
		_filterName = filterName;
		if ((_filterName != null) && (_filterName.equals (""))) {
		    _filterName = null;
		}
		
		// update Filter accordingly
		if (_filterName != null) resourceFilter.setText (_filterName);
		_mode = mode;
	}
	
	/** 
	 * Who to talk to on 'open' or 'load'
	 */
	public void addRepositoryDialogListener(RepositoryDialogListener rdl) {
        listener = rdl;
	}
	
	public void removeRepositoryDialogListener(RepositoryDialogListener rdl) {
        if (listener == rdl) {
            listener = null;
        }
	}
	
	
	/** 
	 * Top start things off, go to the topLevel.
	 */
	public void process() {
	    populate (_topLevel);
	}
    
    /**
     * Creates a dialog box with all LevelEntry objects at the given level
     */
    public void populate(String lev) {
        resourceList.removeAll();
        
        // if this level doesn't exist, handle this way
        Enumeration en;
        try {
            en = repository.openLevel (lev);
        } catch (RepositoryException re) {
            return;
        }
        if (en == null) return;
        
	    // Deal with whether we are at the top of the hierarchy.
	    if (lev.equals(_absoluteTopLevel)) {
	        upButton.enable (false);
	    } else {
	        upButton.enable (true);
            resourceList.addItem (UPONELEVEL);
	    }

	    for (; en.hasMoreElements(); ) {
	        Object o = en.nextElement();
	        if (o instanceof LevelInterface) {
	            LevelInterface li = (Level) o;
	            
	            // we have to ensure that the entries are just the 'last' part of the
	            // level entries.
	            String s = li.getName();
	            int idx1 = s.lastIndexOf ('/');
	            int idx2 = s.lastIndexOf ('/', idx1-1);
	            
	            resourceList.addItem (s.substring (idx2+1, idx1+1));
	        } else if (o instanceof ResourceEntry) {
    	        ResourceEntry re = (ResourceEntry) o;
    	        if (_filterType != null) {
    	            if (!re.getResourceType().equals (_filterType)) {
    	                continue;
    	            }
    	        }
                if (_filterName != null) {
                    if (!re.getResourceName().endsWith ("/" + _filterName)) {
                        continue;
                    }
                }
                String resName = re.getResourceName();
                int idx = resName.lastIndexOf ("/");
                if (idx != -1) {
                    resourceList.addItem (resName.substring (idx+1));
                }
            }
	    }
	    
	    // update levelHistory
	    levelHistory.removeAll();
	    String offset = "";
	    System.out.println ("parsing: " + lev);
	    for (StringTokenizer st = new StringTokenizer(lev, "/", false); st.hasMoreTokens(); ) {
            String interMediate = st.nextToken();
            levelHistory.addItem (offset + interMediate);
            offset = "  " + offset;
	    }
		// make sure the last one shows
		int idx = levelHistory.getItemCount() - 1;
		if (idx >= 0)
    		levelHistory.select (idx);
    }

	public void addNotify()
	{
	    // Record the size of the window prior to calling parents addNotify.
	    Dimension d = getSize();

		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		setSize(insets().left + insets().right + d.width, insets().top + insets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets().left, insets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}

	public RepositoryDialog(Frame parent, String title, RepositoryInterface repository, String topLevel, String filterName, String filterType, int mode)
	{
		this(parent, repository, topLevel, filterName, filterType, mode);
		setTitle(title);
	}

    /**
     * Shows or hides the component depending on the boolean flag b.
     * @param b  if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b)
	{
		if(b)
		{
			Rectangle bounds = getParent().getBounds();
			Rectangle abounds = getBounds();

			setLocation(bounds.x + (bounds.width - abounds.width)/ 2,
				 bounds.y + (bounds.height - abounds.height)/2);
		}
		super.setVisible(b);
	}

    // Used for addNotify check.
	boolean fComponentsAdjusted = false;

	//{{DECLARE_CONTROLS
	java.awt.MenuItem normalMenuItem;
	java.awt.MenuItem detailsMenuItem;
	java.awt.Button actionButton;
	java.awt.Button cancelButton;
	java.awt.Label label1;
	java.awt.List resourceList;
	java.awt.Button upButton;
	java.awt.Label label2;
	java.awt.Label label3;
	java.awt.Choice resourceType;
	java.awt.TextField resourceFilter;
	java.awt.Button createButton;
	java.awt.Choice levelHistory;
	//}}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == RepositoryDialog.this)
				RepositoryDialog_WindowClosing(event);
		}
	}

	void RepositoryDialog_WindowClosing(java.awt.event.WindowEvent event)
	{
           dispose();
	}

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == cancelButton)
				cancelButton_Clicked(event);
			else if (object == actionButton)
				actionButton_Clicked(event);
			else if (object == upButton)
				upButton_ActionPerformed(event);
			else if (object == createButton)
				createButton_ActionPerformed(event);
			else if (object == resourceList)
				resourceList_DblClicked(event);
		    else if (object == normalMenuItem) 
		        normalMenuItem_ActionPerformed(event);
		    else if (object == detailsMenuItem)
		        detailsMenuItem_ActionPerformed(event);
 		}
	}

	void actionButton_Clicked(java.awt.event.ActionEvent event)
	{
		//Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(new WindowEvent((java.awt.Window)getParent(), WindowEvent.WINDOW_CLOSING));
		// should I do something else?
		dispose();
		String resourceName;
		if (_filterName == null)
		   resourceName = _topLevel;
		else
		   resourceName = _topLevel + _filterName;
		   
		String resourceType = _filterType;
	    
	    // If a listener is hooked up, process the request
		if (listener != null)
		   listener.processRepositoryDialog(resourceName, resourceType, _mode);
	}

	void cancelButton_Clicked(java.awt.event.ActionEvent event)
	{
	    dispose();
	}


	void upButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		if (_topLevel.equals ("/")) return;  // should never get here
		// Note: level now starts and ends with "/"...
		int idx = _topLevel.lastIndexOf("/");
		idx = _topLevel.lastIndexOf('/', idx-1);
		
		// If no slash or it topLevel is entirely a "/" then leave it, otherwise
		// remove up to and including the slash
		if ((idx == -1) || (idx == 0)) {
		    _topLevel = "/";
		} else {
    		_topLevel = _topLevel.substring (0, idx+1);
    	}
		populate (_topLevel);
		//}}
	}

	void createButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		String newName = resourceFilter.getText();
		if ((newName == null) || (newName.equals (""))) {
    		Toolkit.getDefaultToolkit().beep();
		    return;
		}
		
		// This ensures that newName is of the form "/a/b/c/d/" where "/a/b/c/" is the
		// topLevel and the new name is "d".  Note that Levels must start and end
		// with a "/" character.
		int idx = newName.indexOf ('/');
		if (idx != -1) {
		    newName = newName.substring (0, idx);
		}
	    newName = _topLevel + newName + "/";
		
		try {
    		if (repository.createLevel (newName) == false) {
    		    Toolkit.getDefaultToolkit().beep();
    		    return;
    		}
    	} catch (RepositoryException re) {
		    Toolkit.getDefaultToolkit().beep();
    	    return;
    	}
		
		// a new entry has been added -- populate now
		populate (_topLevel);
		resourceFilter.setText ("");   // clear for next actions
		//}}
	}

	void resourceList_DblClicked(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
        String value = resourceList.getSelectedItem();
		
		// The '..' is a special one for up
		if (value.equals (UPONELEVEL)) {
		    upButton_ActionPerformed(event);
		    return;
		}

        // a Level.  Dive in
		if (value.endsWith ("/")) {
    		_topLevel = _topLevel + value;
    		populate (_topLevel);
    		return;
		}
		
		// We must have clicked on a resource.  Place its name as if the user had
		// typed it into the resourceFilter object and then perform the desired action.
		resourceFilter.setText (value);
	    actionButton_Clicked (event);
		
		//}}
	}
	
	public String getTopLevel() {
	    // returns the topLevel as chosen so far...
	    return _topLevel;
	}
	public String getFilterName() {
	    // returns the filterName so far...
	    return _filterName;
	}
	public String getFilterType() {
	    // returns the filterType so far...
	    return _filterType;
	}
    public int getMode() {
	    return _mode;
    }

	class SymItem implements java.awt.event.ItemListener
	{
		public void itemStateChanged(java.awt.event.ItemEvent event)
		{
			Object object = event.getSource();
			if (object == resourceType)
				resourceType_ItemStateChanged(event);
			else if (object == resourceList)
				resourceList_ItemStateChanged(event);
		}
	}

	void resourceType_ItemStateChanged(java.awt.event.ItemEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		if (event.getSource() == resourceType) {
		    _filterType = resourceType.getSelectedItem();
		}
		//}}
	}

	class SymText implements java.awt.event.TextListener
	{
		public void textValueChanged(java.awt.event.TextEvent event)
		{
			Object object = event.getSource();
			if (object == resourceFilter)
				resourceFilter_TextValueChanged(event);
		}
	}

	void resourceFilter_TextValueChanged(java.awt.event.TextEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		if (event.getSource() == resourceFilter) {
		    _filterName = resourceFilter.getText();
		    if (_filterName.equals("")) { _filterName = null; }
		}
		//}}
	}

	class SymMouse extends java.awt.event.MouseAdapter
	{
		public void mouseClicked(java.awt.event.MouseEvent event)
		{
			Object object = event.getSource();
			if (object == resourceList)
				resourceList_MouseClicked(event);
		}
	}

	void resourceList_MouseClicked(java.awt.event.MouseEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		if ((event.getModifiers() & InputEvent.BUTTON3_MASK) == InputEvent.BUTTON3_MASK) {
		    pm.show (resourceList, event.getX(), event.getY());
		}
		//}}
	}
	
	void normalMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
        System.out.println("NORMAL");
		//{{CONNECTION
		//}}
	}
	
	void detailsMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
        System.out.println("DETAILS");
        //}}
	}

	void resourceList_ItemStateChanged(java.awt.event.ItemEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Set the cursor... CROSSHAIR_CURSOR
		String newName = resourceList.getSelectedItem();
		if (! newName.endsWith ("/")) {
		    
		    // if clicking on this special string, no filter is called for.
		    if (newName.equals(UPONELEVEL)) return;
		    
    		resourceFilter.setText (newName);
	    	_filterName = newName;
	    }
		//}}
	}
}
