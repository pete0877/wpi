// CSL     : CSL description for Textbean
// Author  : George T. Heineman
//         : heineman@cs.wpi.edu;
//         : http://www.cs.wpi.edu/~heineman
// Version : 1.0

/*

    Every time the user types a key in the text field, AWT sends two action
    events to the text field. The first one represents the key press and
    the second one, the key release. Each action event embodies the state
    of the system at the time that some action occurred. The properties of
    an action event indicate which key was pressed, what modifier keys were
    also pressed, and the time at which the event occurred.

    Since the event is an instance of ActionEvent, the TextField class's
    processEvent method examines the event and passes it along to
    processActionEvent. The latter method redirects the event to any
    ActionListener objects that have registered an interest in action
    events generated by this text field.

    All event handlers must be public because there is no way to restict
    access to a method as in C++ (with friend clause).  This means the user
    must understand that there are methods that should not be invoked
    directly even though it is a public method.

*/

component type TextBean : JavaBean {

  port EchoChar {
     public char getEchoChar();
     public void setEchoChar(char);
     public synchronized void setEchoCharacter(char);  // DEPRECATED
     public boolean echoCharIsSet();
  }

  port Contents {
      public void setText (String);
  }

  port KeyListener {
    public void keyTyped (KeyEvent);
    public void keyPressed (KeyEvent);
    public void keyReleased (KeyEvent);
  }

  port Structure {
      public int getColumns();
      public synchronized void setColumns(int);
  }

  port Presentation {
    public java.awt.Dimension getMinimumSize();
    public synchronized java.awt.Dimension minimumSize();
    public synchronized java.awt.Dimension getPreferredSize(int);
    public synchronized java.awt.Dimension preferredSize(int);
    public java.awt.Dimension getPreferredSize();
    public synchronized java.awt.Dimension preferredSize();
    public java.awt.Dimension getMinimumSize(int);
    public synchronized java.awt.Dimension minimumSize(int);
    public java.awt.Font getFont ();
    public synchronized void setFont (java.awt.Font);
  }

  port EventRegistration {
    public synchronized void addTextBeanListener(java.awt.event.ActionListener);
    public synchronized void removeTextBeannListener(java.awt.event.ActionListener);
    protected void fireAction (TextBeanEventObject);

    public synchronized void addActionListener(java.awt.event.ActionListener);
    public synchronized void removeActionListener(java.awt.event.ActionListener);
    protected void processEvent(java.awt.AWTEvent);
    protected void processActionEvent(java.awt.event.ActionEvent);

  }

  port Miscellaneous {
    public void addNotify();
    synchronized boolean eventEnabled(java.awt.AWTEvent);
    protected java.lang.String paramString();
  }

  port Serializable {
    private void writeObject(java.io.ObjectOutputStream);
    private void readObject(java.io.ObjectInputStream);
  }
}

